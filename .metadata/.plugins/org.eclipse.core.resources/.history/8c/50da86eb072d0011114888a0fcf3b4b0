package cste.android.core;

import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import com.android.future.usb.UsbAccessory;
import com.android.future.usb.UsbManager;

import cste.hnad.CsdMessageHandler;
import android.app.PendingIntent;
import android.app.Service;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.util.Log;

import static cste.hnad.CsdMessageHandler.*;
/***
 * 
 * @author User
 *
 */
public class UsbCommHandler extends BroadcastReceiver implements Runnable {
	private static final String TAG = "USB Comm Handler";
	private static final String ACTION_USB_PERMISSION = "cste.android.usb.action.USB_PERMISSION";
	
	private static final String ACTION_USB_ATTACHED = "cste.android.usb.action.USB_PERMISSION";
	//private static final String ACTION_USB_PERMISSION = "cste.android.usb.UsbCommHandler.USB_PERMISSION";

	private UsbManager mUsbManager;
	private UsbAccessory mAccessory;
	private ParcelFileDescriptor mFileDescriptor;
	private FileInputStream mInputStream;
	private FileOutputStream mOutputStream;
	private Handler mHandler;
	private PendingIntent mPermissionIntent;
	private boolean mPermissionRequestPending;
	private Service mHostService;
	
	public void openUsbAccesory(){
		
		UsbAccessory accessory;
		
		UsbAccessory[] accessories = mUsbManager.getAccessoryList();
		mAccessory = (accessories == null ? null : accessories[0]);
		if (mAccessory != null) {
			if (mUsbManager.hasPermission(mAccessory)) {
				openAccessory(mAccessory);
			} else {
				synchronized (this) {
					if (!mPermissionRequestPending) {
						mUsbManager.requestPermission(accessory,
								mPermissionIntent);
						mPermissionRequestPending = true;
					}
				}
			}
		} else {
			Log.d(TAG, "mAccessory is null");
		}
		
		openAccessory(mAccessory);
	}
	
	/**
	 * 
	 * @param hostService
	 */
	public UsbCommHandler(Service hostService, Handler messageHandler){
		this.mHandler = messageHandler;
		this.mHostService = hostService;
		mUsbManager = UsbManager.getInstance(hostService);
		mPermissionIntent = PendingIntent.getBroadcast(hostService, 0, new Intent(ACTION_USB_PERMISSION), 0);
		IntentFilter filter = new IntentFilter(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
	//	filter.addAction(UsbManager.ACTION_USB_ACCESSORY_DETACHED);
//		filter.addAction(UsbManager.ACTION_USB_ACCESSORY_ATTACHED);
		hostService.registerReceiver(this, filter);
		

	}
	

		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			UsbAccessory accessory;
			if (UsbManager.ACTION_USB_ACCESSORY_DETACHED.equals(action)) {
				accessory = UsbManager.getAccessory(intent);
				if (accessory != null && accessory.equals(mAccessory)) {
					closeAccessory();
				}
			}else if (ACTION_USB_PERMISSION.equals(action)) {
				synchronized (this) {
					accessory = UsbManager.getAccessory(intent);
					if (intent.getBooleanExtra(UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
						openAccessory(accessory);
					} else {
						Log.d(TAG, "permission denied for accessory " + accessory);
					}
					mPermissionRequestPending = false;
				}
			}
		}

	private void openAccessory(UsbAccessory accessory) {
		mFileDescriptor = mUsbManager.openAccessory(accessory);
		if (mFileDescriptor != null) {
			mAccessory = accessory;
			FileDescriptor fd = mFileDescriptor.getFileDescriptor();
			mInputStream = new FileInputStream(fd);
			mOutputStream = new FileOutputStream(fd);
			Thread thread = new Thread(null, this, "UsbBridge");
			thread.start();
			Log.d(TAG, "accessory opened");
			//enableControls(true);
		} else {
			Log.d(TAG, "accessory open fail");
		}
	}
	
	private void closeAccessory() {
		try {
			if (mFileDescriptor != null) {
				mFileDescriptor.close();
			}
		} catch (IOException e) {
		} finally {
			mFileDescriptor = null;
			mAccessory = null;
		}
	}
	private int composeInt(byte hi, byte lo) {
		int val = (int) hi & 0xff;
		val *= 256;
		val += (int) lo & 0xff;
		return val;
	}
	/***
	 * 
	 */
	public void deRegister(){
		mHostService.unregisterReceiver(this);
	}
	
	@Override
	public void run() {
		int ret = 0;
		byte[] buffer = new byte[16384];
		int i;

		while (ret >= 0) {
			try {
				ret = mInputStream.read(buffer);
			} catch (IOException e) {
				break;
			}
			
			if(ret>0)
			{
				try {
					this.mOutputStream.write(buffer, 0, ret);
				} catch (IOException e) {
					// TODO Auto-generated catch block
					break;
				}
			}
		}
//
//			i = 0;
//			while (i < ret) {
//				int len = ret - i;
//
//				switch (buffer[i]) {
//				case 0x01:
//					Message m = Message.obtain(mHandler,PACKET_RECEIVED);
//					int val = composeInt(buffer[i+1],buffer[i+2]);
//					m.arg1 =val;
//					mHandler.sendMessage(m);
//					i += 3;
//					break;
//				default:
//					i++;
//					break;
//				}
//			}
//		}
	}
}
