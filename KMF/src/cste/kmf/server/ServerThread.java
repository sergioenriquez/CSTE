package cste.kmf.server;
import java.io.DataInputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.IOException;
import java.net.Socket;
import javax.xml.bind.annotation.adapters.HexBinaryAdapter;

import static cste.PacketTypes.KmfPacketTypes.*;
import static cste.icd.Constants.ENCRYPTION_KEY_LENGTH;
import static cste.icd.Constants.UID_LENGTH;
import cste.PacketTypes.KmfPacketTypes;
import cste.icd.DeviceType;
import cste.icd.Constants;
import cste.interfaces.IpWrapper;
import cste.ip.IpPacket;
import cste.ip.IpWrapperImpl;
import cste.kmf.KmfApp;
import cste.kmf.KmfDeviceRecord;
import cste.kmf.KmfDeviceRecord.InvalidRecordExeption;
import cste.kmf.database.KmfDbHandler;

public class ServerThread implements Runnable{
    protected Socket clientSocket = null;
    protected ObjectInputStream in = null;
    protected ObjectOutputStream out = null;
    protected static HexBinaryAdapter Hex = new HexBinaryAdapter();
    protected IpWrapper ipWrapper = new IpWrapperImpl();
    
	public ServerThread(Socket socket) {
		System.out.println("Client connected");
        clientSocket = socket;
        
    }
	
	@Override
	public void run() {
		try {
			out = new ObjectOutputStream(clientSocket.getOutputStream());
			in = new ObjectInputStream(clientSocket.getInputStream());
        } catch (IOException e) {
        	System.err.println("Error reading from client socket");
        	return;
        }
        
        IpPacket p = ipWrapper.getReply(in);
		
		if ( p == null){
			// handle IO errror
			return;
		}

		switch(p.getFunctionCode()){
		case ADD_RECORD:
			handleAddRecordRequest(p);
			break;
		case DELETE_RECORD:
			handleDeleteRecordPacket(p);
			break;
		case GENERATE_LTK:
			handleGenerateLTKPacket(p);
			break;
		case GENERATE_TCK:
			handleGenerateTCKPacket(p);
			break;
		default:
			System.out.println("Received an invalid packet type!");
			break;
		}
		
		try {
			clientSocket.close();
		} catch (IOException e) {
			System.err.println("Error closing socket");
		}
	}
	
	void handleGenerateLTKPacket(IpPacket p){
//		DataInputStream ds = p.getPayloadDataStream();
		byte[] deviceUID = new byte[UID_LENGTH];
		byte[] newLTK = null;
		
		try {
			in.read(deviceUID);
		} catch (IOException e) {
			System.err.println("error reading generate LTK packet!");
			return;
		}
		
		KmfDeviceRecord currentRecord = KmfDbHandler.getDeviceRecord(deviceUID);
		
		if ( currentRecord == null){
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
			return;
		}
		
		byte[] rekeyKey = currentRecord.getRekeyKey();

		byte[] currentLTK = currentRecord.getLTK();
		//newLTK = Constants.encryptAES(currentLTK,rekeyKey);

		if ( newLTK == null){
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
			return;
		}
		
		try {
			KmfDeviceRecord modifiedRecord = new KmfDeviceRecord(
					currentRecord.getDeviceType(),
					currentRecord.getUID(),
					currentRecord.getRekeyKey(),
					currentRecord.getRekeyCtr()+1,
					newLTK);
			
			KmfDbHandler.addDeviceRecord(modifiedRecord);
		} catch (InvalidRecordExeption e) {
			System.err.println("Error updating device record!");
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
			return;
		}
		
		String.format("New LTK generated for %s : %s", Hex.marshal(deviceUID),Hex.marshal(newLTK));

		ipWrapper.sendIcdPacket(KmfPacketTypes.REPLY_KEY, newLTK, p.getSenderUID(), out);
	}
	
	/***
	 * Device A is the sender, B is the receiver and can generate the TCK on its own
	 */
	void handleGenerateTCKPacket(IpPacket p){
		DataInputStream ds = p.getPayloadDataStream();
		byte[] deviceUID_A = new byte[UID_LENGTH];
		byte[] deviceUID_B = new byte[UID_LENGTH];
		
		try {
			ds.read(deviceUID_A);
			ds.read(deviceUID_B);
		} catch (IOException e) {
			System.err.println("error reading generate TCK packet!");
			return;
		}
		
		KmfDeviceRecord recordA = KmfDbHandler.getDeviceRecord(deviceUID_A);
		KmfDeviceRecord recordB = KmfDbHandler.getDeviceRecord(deviceUID_B);
		
		if ( recordA == null || recordB == null){
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
			return;
		}
		
		int senderDevLvl = recordA.getDeviceLevel();
		byte[] generatedTCK = null;
		
		switch(senderDevLvl){
		case 0:
			generatedTCK = Constants.generateTCK_L0(
					recordB.getRekeyKey(), 
					KmfApp.getKmfUID(), 
					recordA.getRekeyCtr());
			break;
		case 1:
			generatedTCK = Constants.generateTCK_L1(
					recordA.getUID(),
					recordB.getLTK());
			break;
		default:
			// level 2 is generated by the DCP, so KMF is not involved
				break;
		}
		String.format("TCK generated for %s,%s : %s", Hex.marshal(deviceUID_A),Hex.marshal(deviceUID_B),Hex.marshal(generatedTCK)   );

		ipWrapper.sendIcdPacket(KmfPacketTypes.REPLY_KEY, generatedTCK, p.getSenderUID(), out);
	}
	
	void handleDeleteRecordPacket(IpPacket p){
		DataInputStream ds = p.getPayloadDataStream();
		byte uid[] = new byte[UID_LENGTH];
		try {
			ds.read(uid, 0, UID_LENGTH);
		} catch (IOException e) {
			System.err.println("Error reading delete record packet from socket!");
			return;
		}
		
		if ( KmfDbHandler.deleteDeviceRecord(uid) )
		{
			System.out.println("Record deleted, UID = " + Hex.marshal(uid));
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_SUCCESS, null, p.getSenderUID(), out);
		}
		else
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
	}
	
	/***
	 * When added a new device, set LTK to all 0, and rekey counter to 0
	 * 
	 * @param is
	 */
	void handleAddRecordRequest(IpPacket p){
		DataInputStream ds = p.getPayloadDataStream();
		byte uid[] = new byte[UID_LENGTH];
		byte rekeyKey[] = new byte[ENCRYPTION_KEY_LENGTH];
		byte devLTK[] = new byte[ENCRYPTION_KEY_LENGTH];
		DeviceType type;
		int rekeyCtr = 0;
		
		try {
			type = DeviceType.fromValue(ds.read());
			ds.read(uid, 0, UID_LENGTH);
			ds.read(rekeyKey, 0, ENCRYPTION_KEY_LENGTH);
			rekeyCtr = ds.readInt();
			ds.read(devLTK,0,ENCRYPTION_KEY_LENGTH);
		} catch (IOException e) {
			System.err.println("Error reading add record packet from socket!");
			return;
		}

		KmfDeviceRecord record;
		try {
			record = new KmfDeviceRecord(type,uid,rekeyKey,rekeyCtr,devLTK);
		} catch (InvalidRecordExeption e) {
			System.err.println("The device record is invalid");
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_FAILED, null, p.getSenderUID(), out);
			return;
		}
		
		if ( KmfDbHandler.addDeviceRecord(record) ){
			System.out.println( "New/updated record: " + record  );
			ipWrapper.sendIcdPacket(KmfPacketTypes.OP_SUCCESS, null, p.getSenderUID(), out);
		}
	}
}
